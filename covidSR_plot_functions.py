# plot functions
# read input from the files generated by modelSuperinfection

import matplotlib.pyplot as plt
import numpy as np
from covidSR_functions import indexFunction
from covidSR_parameters_newUSA import par

# normalized (per 100 000) numbers of individuals in the compartments
## pops: list of compartments (number of individuals there) for all Erlang stages
## Nerls: Erlang stages, see covid_parameters_newUSA
def popsums2D(pops, Nerls):
    index = indexFunction(Nerls)
    indexComp = [1,
                  1 + Nerls['E'],
                  1 + 2 * Nerls['E'],
                  1 + 3 * Nerls['E'],
                   1 + 3 * Nerls['E'] + Nerls['P'],
                   1 + 3 * Nerls['E'] + 2 * Nerls['P'],
                   1 + 3 * Nerls['E'] + 3 * Nerls['P'],
                    1 + 3 * Nerls['E'] + 3 * Nerls['P'] + Nerls['I'],
                    1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 2 * Nerls['I'],
                    1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'],
                     1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'] + Nerls['L'],
                     1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'] + 2 * Nerls['L'],
                     1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'] + 3 * Nerls['L'],
                      1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'] + 3 * Nerls['L'] + 1,
                      1 + 3 * Nerls['E'] + 3 * Nerls['P'] + 3 * Nerls['I'] + 3 * Nerls['L'] + 2]
    N = np.sum(pops, axis = 0)[0]
    popSum = np.zeros((15, 900))

    popSum[0] = pops[index['S']]*100000/N                                       # S:  0
    popSum[1] = np.sum(pops[indexComp[0]:indexComp[1]], axis = 0)*100000/N     # E_:  1
    popSum[2] = np.sum(pops[indexComp[1]:indexComp[2]], axis = 0)*100000/N     # Es:  2
    popSum[3] = np.sum(pops[indexComp[2]:indexComp[3]], axis = 0)*100000/N     # Em:  3
    popSum[4] = np.sum(pops[indexComp[3]:indexComp[4]], axis = 0)*100000/N     # P_:  4
    popSum[5] = np.sum(pops[indexComp[4]:indexComp[5]], axis = 0)*100000/N     # Ps:  5
    popSum[6] = np.sum(pops[indexComp[5]:indexComp[6]], axis = 0)*100000/N     # Pm:  6
    popSum[7] = np.sum(pops[indexComp[6]:indexComp[7]], axis = 0)*100000/N     # I_:  7
    popSum[8] = np.sum(pops[indexComp[7]:indexComp[8]], axis = 0)*100000/N     # Is:  8
    popSum[9] = np.sum(pops[indexComp[8]:indexComp[9]], axis = 0)*100000/N     # Im:  9
    popSum[10] = np.sum(pops[indexComp[9]:indexComp[10]], axis = 0)*100000/N   # L_: 10
    popSum[11] = np.sum(pops[indexComp[10]:indexComp[11]], axis = 0)*100000/N  # Ls: 11
    popSum[12] = np.sum(pops[indexComp[11]:indexComp[12]], axis = 0)*100000/N  # Lm: 12
    popSum[13] = pops[index['R']]*100000/N                                      # R: 13
    popSum[14] = pops[index['D']]*100000/N                                      # D: 14
    return popSum

# plot 3 plots of one series of scenarios: A - susceptible; B - infected; C - dead
# par: parameters of the basic simulation, see covid_parameters_newUSA
# names: part of filenames of the simulations to load; pathIn: path to files to load ->
## the following files are loaded, need to have the format of results of modelSuperinfection: pathIn +'/covidSR_' + names[i] + '.txt'
# labels: list of labels for plotting, refer to names
# type (str) ['fsick', 'fdead', 'fiso', 'm', 'q', 'pdist']: scenarios type, to select title of legend
# shade (float [0,1]): intenstiy of background shading (0: off)
# R0 (logical): if gray dashed line for R0
# limits: limit of y axis for plots of infected and dead
# cols: line colors
# loc: location of legend
# pathOut: to save file of plot - pathOut + '/' +  savename + '.pdf'
def plotSim(type, scenarios, par, pathIn = 'covidSR_results'):
    n = len(scenarios)
    # load simulation results
    pops = [0 for i in np.arange(n)]
    for i in np.arange(n):
        pop_i = np.loadtxt(pathIn +'/covidSR_' + scenarios[i] + '.txt')
        pops[i] = popsums2D(pop_i, Nerls=par['NErl'])

    # time as vector
    tim = np.arange(0, len(pops[1][0]))

    for i in np.arange(n):
        # Susceptibles
        if type == 'S':
            plt.plot(tim, pops[i][0], label=scenarios[i])
        # Infected (solid: all infections, dashed: multi-infections)
        if type == 'I':
            plt.plot(tim, np.sum(pops[i][1:12], axis = 0), label=scenarios[i])
            plt.plot(tim, (pops[i][3] + pops[i][6] + pops[i][9] + pops[i][12]), linestyle='--')
        if type == 'D':
            plt.plot(tim, pops[i][14], label=scenarios[i])
    plt.legend()
    plt.show()
    return
